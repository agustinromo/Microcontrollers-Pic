CCS PCM C Compiler, Version 4.104, 5967               23-dic-17 19:42

               Filename: C:\Users\VAIOPC\Documents\ADATA\Microcontroladores\PIC C\medidor_de temperatura\medidor_temp_venti_877.lst

               ROM used: 1006 words (12%)
                         Largest free fragment is 2048
               RAM used: 11 (3%) at main() level
                         35 (10%) worst case
               Stack:    5 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   336
0003:  NOP
.................... # include<16f877a.h>  
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... # device *=16  
.................... # device adc=10  
.................... # use delay(clock=4M)  
*
002B:  MOVLW  32
002C:  MOVWF  04
002D:  BCF    03.7
002E:  MOVF   00,W
002F:  BTFSC  03.2
0030:  GOTO   03F
0031:  MOVLW  01
0032:  MOVWF  78
0033:  CLRF   77
0034:  DECFSZ 77,F
0035:  GOTO   034
0036:  DECFSZ 78,F
0037:  GOTO   033
0038:  MOVLW  4A
0039:  MOVWF  77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  GOTO   03D
003D:  DECFSZ 00,F
003E:  GOTO   031
003F:  RETURN
.................... # include <lcd.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0053:  MOVLW  0F
0054:  BSF    03.5
0055:  ANDWF  08,W
0056:  IORLW  F0
0057:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0058:  BCF    03.5
0059:  BSF    08.2
....................    delay_cycles(1); 
005A:  NOP
....................    lcd_output_enable(1); 
005B:  BSF    08.0
....................    delay_cycles(1); 
005C:  NOP
....................    high = lcd_read_nibble(); 
005D:  CALL   04C
005E:  MOVF   78,W
005F:  MOVWF  39
....................        
....................    lcd_output_enable(0); 
0060:  BCF    08.0
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    08.0
....................    delay_us(1); 
0063:  NOP
....................    low = lcd_read_nibble(); 
0064:  CALL   04C
0065:  MOVF   78,W
0066:  MOVWF  38
....................        
....................    lcd_output_enable(0); 
0067:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0068:  MOVLW  0F
0069:  BSF    03.5
006A:  ANDWF  08,W
006B:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
006C:  BCF    03.5
006D:  SWAPF  39,W
006E:  MOVWF  77
006F:  MOVLW  F0
0070:  ANDWF  77,F
0071:  MOVF   77,W
0072:  IORWF  38,W
0073:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004C:  MOVF   08,W
004D:  MOVWF  77
004E:  SWAPF  08,W
004F:  ANDLW  0F
0050:  MOVWF  78
....................   #endif 
.................... } 
0051:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0040:  SWAPF  39,W
0041:  ANDLW  F0
0042:  MOVWF  77
0043:  MOVLW  0F
0044:  ANDWF  08,W
0045:  IORWF  77,W
0046:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    08.0
....................    delay_us(2); 
0049:  GOTO   04A
....................    lcd_output_enable(0); 
004A:  BCF    08.0
.................... } 
004B:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0052:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0074:  MOVF   78,W
0075:  MOVWF  38
0076:  BTFSC  38.7
0077:  GOTO   053
....................    lcd_output_rs(address); 
0078:  BTFSS  36.0
0079:  BCF    08.1
007A:  BTFSC  36.0
007B:  BSF    08.1
....................    delay_cycles(1); 
007C:  NOP
....................    lcd_output_rw(0); 
007D:  BCF    08.2
....................    delay_cycles(1); 
007E:  NOP
....................    lcd_output_enable(0); 
007F:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0080:  SWAPF  37,W
0081:  MOVWF  38
0082:  MOVLW  0F
0083:  ANDWF  38,F
0084:  MOVF   38,W
0085:  MOVWF  39
0086:  CALL   040
....................    lcd_send_nibble(n & 0xf); 
0087:  MOVF   37,W
0088:  ANDLW  0F
0089:  MOVWF  38
008A:  MOVWF  39
008B:  CALL   040
.................... } 
008C:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008D:  MOVLW  0F
008E:  BSF    03.5
008F:  ANDWF  08,W
0090:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0091:  BCF    08.0
....................    lcd_rs_tris(); 
0092:  BCF    08.1
....................    lcd_rw_tris(); 
0093:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0094:  BCF    03.5
0095:  BCF    08.1
....................    lcd_output_rw(0); 
0096:  BCF    08.2
....................    lcd_output_enable(0); 
0097:  BCF    08.0
....................      
....................    delay_ms(15); 
0098:  MOVLW  0F
0099:  MOVWF  32
009A:  CALL   02B
....................    for(i=1;i<=3;++i) 
009B:  MOVLW  01
009C:  MOVWF  24
009D:  MOVF   24,W
009E:  SUBLW  03
009F:  BTFSS  03.0
00A0:  GOTO   0A9
....................    { 
....................        lcd_send_nibble(3); 
00A1:  MOVLW  03
00A2:  MOVWF  39
00A3:  CALL   040
....................        delay_ms(5); 
00A4:  MOVLW  05
00A5:  MOVWF  32
00A6:  CALL   02B
....................    } 
00A7:  INCF   24,F
00A8:  GOTO   09D
....................      
....................    lcd_send_nibble(2); 
00A9:  MOVLW  02
00AA:  MOVWF  39
00AB:  CALL   040
....................    for(i=0;i<=3;++i) 
00AC:  CLRF   24
00AD:  MOVF   24,W
00AE:  SUBLW  03
00AF:  BTFSS  03.0
00B0:  GOTO   0BA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B1:  MOVF   24,W
00B2:  CALL   004
00B3:  MOVWF  25
00B4:  CLRF   36
00B5:  MOVF   25,W
00B6:  MOVWF  37
00B7:  CALL   052
00B8:  INCF   24,F
00B9:  GOTO   0AD
.................... } 
00BA:  RETURN
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
00BB:  DECFSZ 33,W
00BC:  GOTO   0BE
00BD:  GOTO   0C1
....................       address=LCD_LINE_TWO; 
00BE:  MOVLW  40
00BF:  MOVWF  34
....................    else 
00C0:  GOTO   0C2
....................       address=0; 
00C1:  CLRF   34
....................       
....................    address+=x-1; 
00C2:  MOVLW  01
00C3:  SUBWF  32,W
00C4:  ADDWF  34,F
....................    lcd_send_byte(0,0x80|address); 
00C5:  MOVF   34,W
00C6:  IORLW  80
00C7:  MOVWF  35
00C8:  CLRF   36
00C9:  MOVF   35,W
00CA:  MOVWF  37
00CB:  CALL   052
.................... } 
00CC:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00CD:  MOVF   31,W
00CE:  XORLW  0C
00CF:  BTFSC  03.2
00D0:  GOTO   0D8
00D1:  XORLW  06
00D2:  BTFSC  03.2
00D3:  GOTO   0E0
00D4:  XORLW  02
00D5:  BTFSC  03.2
00D6:  GOTO   0E6
00D7:  GOTO   0EB
....................       case '\f'   :  lcd_send_byte(0,1); 
00D8:  CLRF   36
00D9:  MOVLW  01
00DA:  MOVWF  37
00DB:  CALL   052
....................                      delay_ms(2); 
00DC:  MOVLW  02
00DD:  MOVWF  32
00DE:  CALL   02B
....................                      break; 
00DF:  GOTO   0F1
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E0:  MOVLW  01
00E1:  MOVWF  32
00E2:  MOVLW  02
00E3:  MOVWF  33
00E4:  CALL   0BB
00E5:  GOTO   0F1
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E6:  CLRF   36
00E7:  MOVLW  10
00E8:  MOVWF  37
00E9:  CALL   052
00EA:  GOTO   0F1
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00EB:  MOVLW  01
00EC:  MOVWF  36
00ED:  MOVF   31,W
00EE:  MOVWF  37
00EF:  CALL   052
00F0:  GOTO   0F1
....................    } 
.................... } 
00F1:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... float temperatura;  
....................  
.................... void main()  
.................... { 
*
0336:  CLRF   04
0337:  BCF    03.7
0338:  MOVLW  1F
0339:  ANDWF  03,F
033A:  BSF    03.5
033B:  BSF    1F.0
033C:  BSF    1F.1
033D:  BSF    1F.2
033E:  BCF    1F.3
033F:  MOVLW  07
0340:  MOVWF  1C
....................  setup_adc_ports(RA0_ANALOG);  
0341:  BCF    1F.0
0342:  BSF    1F.1
0343:  BSF    1F.2
0344:  BSF    1F.3
....................  setup_adc(ADC_CLOCK_INTERNAL);  
0345:  BCF    1F.6
0346:  BCF    03.5
0347:  BSF    1F.6
0348:  BSF    1F.7
0349:  BSF    03.5
034A:  BSF    1F.7
034B:  BCF    03.5
034C:  BSF    1F.0
....................  setup_COUNTERS(RTCC_internal.rtcc_div_1);  
034D:  MOVLW  08
034E:  MOVWF  77
034F:  CLRF   01
0350:  MOVLW  81
0351:  MOVWF  04
0352:  BCF    03.7
0353:  MOVF   00,W
0354:  ANDLW  C0
0355:  IORLW  07
0356:  MOVWF  00
0357:  CLRWDT
0358:  MOVF   00,W
0359:  ANDLW  C7
035A:  BTFSC  77.3
035B:  ANDLW  C0
035C:  IORWF  77,W
035D:  MOVWF  00
....................  set_adc_channel(0);  
035E:  MOVLW  00
035F:  MOVWF  78
0360:  MOVF   1F,W
0361:  ANDLW  C7
0362:  IORWF  78,W
0363:  MOVWF  1F
....................   
....................   lcd_init();  
0364:  CALL   08D
....................    lcd_gotoxy(5,1);   
0365:  MOVLW  05
0366:  MOVWF  32
0367:  MOVLW  01
0368:  MOVWF  33
0369:  CALL   0BB
....................    printf(lcd_putc,"Temperatura");  
036A:  MOVLW  0C
036B:  BSF    03.6
036C:  MOVWF  0D
036D:  MOVLW  00
036E:  MOVWF  0F
036F:  BCF    03.6
0370:  CALL   0F2
....................    delay_ms(350);  
0371:  MOVLW  02
0372:  MOVWF  24
0373:  MOVLW  AF
0374:  MOVWF  32
0375:  CALL   02B
0376:  DECFSZ 24,F
0377:  GOTO   373
....................    lcd_init();  
0378:  CALL   08D
....................  while(true)  
....................     {  
....................     temperatura= read_adc()/2; //grados centigrados 
0379:  BSF    1F.2
037A:  BTFSC  1F.2
037B:  GOTO   37A
037C:  BSF    03.5
037D:  MOVF   1E,W
037E:  BCF    03.5
037F:  MOVWF  24
0380:  BCF    03.0
0381:  RRF    1E,W
0382:  MOVWF  7A
0383:  RRF    24,W
0384:  MOVWF  79
0385:  MOVWF  24
0386:  MOVF   7A,W
0387:  MOVWF  25
0388:  GOTO   138
0389:  MOVF   7A,W
038A:  MOVWF  23
038B:  MOVF   79,W
038C:  MOVWF  22
038D:  MOVF   78,W
038E:  MOVWF  21
038F:  MOVF   77,W
0390:  MOVWF  20
....................     lcd_gotoxy(5,1);  
0391:  MOVLW  05
0392:  MOVWF  32
0393:  MOVLW  01
0394:  MOVWF  33
0395:  CALL   0BB
....................     printf(lcd_putc,"%f",temperatura);  
0396:  MOVLW  89
0397:  MOVWF  04
0398:  MOVF   23,W
0399:  MOVWF  27
039A:  MOVF   22,W
039B:  MOVWF  26
039C:  MOVF   21,W
039D:  MOVWF  25
039E:  MOVF   20,W
039F:  MOVWF  24
03A0:  MOVLW  02
03A1:  MOVWF  28
03A2:  GOTO   199
....................     lcd_gotoxy(14,1);  
03A3:  MOVLW  0E
03A4:  MOVWF  32
03A5:  MOVLW  01
03A6:  MOVWF  33
03A7:  CALL   0BB
....................     printf(lcd_putc,"Grados");  
03A8:  MOVLW  12
03A9:  BSF    03.6
03AA:  MOVWF  0D
03AB:  MOVLW  00
03AC:  MOVWF  0F
03AD:  BCF    03.6
03AE:  CALL   0F2
....................     delay_ms(200);  
03AF:  MOVLW  C8
03B0:  MOVWF  32
03B1:  CALL   02B
....................      
....................     if(temperatura >=23)  
03B2:  CLRF   27
03B3:  CLRF   26
03B4:  MOVLW  38
03B5:  MOVWF  25
03B6:  MOVLW  83
03B7:  MOVWF  24
03B8:  MOVF   23,W
03B9:  MOVWF  2B
03BA:  MOVF   22,W
03BB:  MOVWF  2A
03BC:  MOVF   21,W
03BD:  MOVWF  29
03BE:  MOVF   20,W
03BF:  MOVWF  28
03C0:  GOTO   2F5
03C1:  BTFSC  03.0
03C2:  GOTO   3C5
03C3:  BTFSS  03.2
03C4:  GOTO   3D9
....................      {  
....................       output_high(PIN_B1);  
03C5:  BSF    03.5
03C6:  BCF    06.1
03C7:  BCF    03.5
03C8:  BSF    06.1
....................       lcd_gotoxy(5,2); 
03C9:  MOVLW  05
03CA:  MOVWF  32
03CB:  MOVLW  02
03CC:  MOVWF  33
03CD:  CALL   0BB
....................       printf(lcd_putc,"Activando Ventilador");  
03CE:  MOVLW  16
03CF:  BSF    03.6
03D0:  MOVWF  0D
03D1:  MOVLW  00
03D2:  MOVWF  0F
03D3:  BCF    03.6
03D4:  CALL   0F2
....................       delay_ms(200); 
03D5:  MOVLW  C8
03D6:  MOVWF  32
03D7:  CALL   02B
....................      }  
....................       else  
03D8:  GOTO   3EC
....................        {  
....................         output_low(PIN_B1);  
03D9:  BSF    03.5
03DA:  BCF    06.1
03DB:  BCF    03.5
03DC:  BCF    06.1
....................          lcd_gotoxy(5,2); 
03DD:  MOVLW  05
03DE:  MOVWF  32
03DF:  MOVLW  02
03E0:  MOVWF  33
03E1:  CALL   0BB
....................          printf(lcd_putc,"Esta chido el clima");  
03E2:  MOVLW  21
03E3:  BSF    03.6
03E4:  MOVWF  0D
03E5:  MOVLW  00
03E6:  MOVWF  0F
03E7:  BCF    03.6
03E8:  CALL   0F2
....................          delay_ms(200); 
03E9:  MOVLW  C8
03EA:  MOVWF  32
03EB:  CALL   02B
....................        } 
....................    }  
03EC:  GOTO   379
.................... } 
03ED:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
