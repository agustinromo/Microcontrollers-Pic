CCS PCM C Compiler, Version 4.104, 5967               24-dic-17 01:59

               Filename: C:\Users\VAIOPC\Documents\ADATA\Microcontroladores\PIC C\medidor_temp\medidor_temp.lst

               ROM used: 827 words (10%)
                         Largest free fragment is 2048
               RAM used: 8 (2%) at main() level
                         24 (7%) worst case
               Stack:    5 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   225
0003:  NOP
.................... #include "C:\Users\VAIOPC\Documents\ADATA\Microcontroladores\PIC C\medidor_temp\medidor_temp.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
....................  
.................... #use delay(clock=4000000)  
*
002C:  MOVLW  29
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   040
0032:  MOVLW  01
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  4A
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  GOTO   03E
003E:  DECFSZ 00,F
003F:  GOTO   032
0040:  RETURN
....................   #define LCD_ENABLE_PIN PIN_D0  
....................   #define LCD_RS_PIN     PIN_D1  
....................   #define LCD_RW_PIN     PIN_D2 
....................   #define LCD_DATA4      PIN_D4  
....................   #define LCD_DATA5      PIN_D5  
....................   #define LCD_DATA6      PIN_D6  
....................   #define LCD_DATA7      PIN_D7  
....................  
....................  
....................  
....................   #ZERO_RAM 
....................  #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A0:  BSF    08.4
....................    output_float(LCD_DATA5); 
00A1:  BSF    08.5
....................    output_float(LCD_DATA6); 
00A2:  BSF    08.6
....................    output_float(LCD_DATA7); 
00A3:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A4:  BCF    03.5
00A5:  BSF    08.2
00A6:  BSF    03.5
00A7:  BCF    08.2
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    08.0
00AB:  BSF    03.5
00AC:  BCF    08.0
....................    delay_cycles(1); 
00AD:  NOP
....................    high = lcd_read_nibble(); 
00AE:  BCF    03.5
00AF:  CALL   06C
00B0:  MOVF   78,W
00B1:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00B2:  BCF    08.0
00B3:  BSF    03.5
00B4:  BCF    08.0
....................    delay_cycles(1); 
00B5:  NOP
....................    lcd_output_enable(1); 
00B6:  BCF    03.5
00B7:  BSF    08.0
00B8:  BSF    03.5
00B9:  BCF    08.0
....................    delay_us(1); 
00BA:  NOP
....................    low = lcd_read_nibble(); 
00BB:  BCF    03.5
00BC:  CALL   06C
00BD:  MOVF   78,W
00BE:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
00BF:  BCF    08.0
00C0:  BSF    03.5
00C1:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C2:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00C3:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00C4:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00C5:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C6:  BCF    03.5
00C7:  SWAPF  30,W
00C8:  MOVWF  77
00C9:  MOVLW  F0
00CA:  ANDWF  77,F
00CB:  MOVF   77,W
00CC:  IORWF  2F,W
00CD:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006C:  CLRF   31
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
006D:  BSF    03.5
006E:  BSF    08.4
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  08.4
0072:  MOVLW  01
0073:  IORWF  31,F
....................    n |= input(LCD_DATA5) << 1; 
0074:  BSF    03.5
0075:  BSF    08.5
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  08.5
0079:  MOVLW  01
007A:  MOVWF  77
007B:  BCF    03.0
007C:  RLF    77,F
007D:  MOVF   77,W
007E:  IORWF  31,F
....................    n |= input(LCD_DATA6) << 2; 
007F:  BSF    03.5
0080:  BSF    08.6
0081:  MOVLW  00
0082:  BCF    03.5
0083:  BTFSC  08.6
0084:  MOVLW  01
0085:  MOVWF  77
0086:  RLF    77,F
0087:  RLF    77,F
0088:  MOVLW  FC
0089:  ANDWF  77,F
008A:  MOVF   77,W
008B:  IORWF  31,F
....................    n |= input(LCD_DATA7) << 3; 
008C:  BSF    03.5
008D:  BSF    08.7
008E:  MOVLW  00
008F:  BCF    03.5
0090:  BTFSC  08.7
0091:  MOVLW  01
0092:  MOVWF  77
0093:  RLF    77,F
0094:  RLF    77,F
0095:  RLF    77,F
0096:  MOVLW  F8
0097:  ANDWF  77,F
0098:  MOVF   77,W
0099:  IORWF  31,F
....................     
....................    return(n); 
009A:  MOVF   31,W
009B:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
009C:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0041:  BTFSC  30.0
0042:  GOTO   045
0043:  BCF    08.4
0044:  GOTO   046
0045:  BSF    08.4
0046:  BSF    03.5
0047:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0048:  BCF    03.5
0049:  BTFSC  30.1
004A:  GOTO   04D
004B:  BCF    08.5
004C:  GOTO   04E
004D:  BSF    08.5
004E:  BSF    03.5
004F:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0050:  BCF    03.5
0051:  BTFSC  30.2
0052:  GOTO   055
0053:  BCF    08.6
0054:  GOTO   056
0055:  BSF    08.6
0056:  BSF    03.5
0057:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0058:  BCF    03.5
0059:  BTFSC  30.3
005A:  GOTO   05D
005B:  BCF    08.7
005C:  GOTO   05E
005D:  BSF    08.7
005E:  BSF    03.5
005F:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_enable(1); 
0061:  BCF    03.5
0062:  BSF    08.0
0063:  BSF    03.5
0064:  BCF    08.0
....................    delay_us(2); 
0065:  GOTO   066
....................    lcd_output_enable(0); 
0066:  BCF    03.5
0067:  BCF    08.0
0068:  BSF    03.5
0069:  BCF    08.0
.................... } 
006A:  BCF    03.5
006B:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
009D:  BCF    08.1
009E:  BSF    03.5
009F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CE:  MOVF   78,W
00CF:  MOVWF  2F
00D0:  BTFSS  2F.7
00D1:  GOTO   0D4
00D2:  BSF    03.5
00D3:  GOTO   0A0
....................    lcd_output_rs(address); 
00D4:  MOVF   2D,F
00D5:  BTFSS  03.2
00D6:  GOTO   0D9
00D7:  BCF    08.1
00D8:  GOTO   0DA
00D9:  BSF    08.1
00DA:  BSF    03.5
00DB:  BCF    08.1
....................    delay_cycles(1); 
00DC:  NOP
....................    lcd_output_rw(0); 
00DD:  BCF    03.5
00DE:  BCF    08.2
00DF:  BSF    03.5
00E0:  BCF    08.2
....................    delay_cycles(1); 
00E1:  NOP
....................    lcd_output_enable(0); 
00E2:  BCF    03.5
00E3:  BCF    08.0
00E4:  BSF    03.5
00E5:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00E6:  BCF    03.5
00E7:  SWAPF  2E,W
00E8:  MOVWF  2F
00E9:  MOVLW  0F
00EA:  ANDWF  2F,F
00EB:  MOVF   2F,W
00EC:  MOVWF  30
00ED:  CALL   041
....................    lcd_send_nibble(n & 0xf); 
00EE:  MOVF   2E,W
00EF:  ANDLW  0F
00F0:  MOVWF  2F
00F1:  MOVWF  30
00F2:  CALL   041
.................... } 
00F3:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F4:  BSF    03.5
00F5:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F6:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F7:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F8:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F9:  BCF    08.0
....................    lcd_rs_tris(); 
00FA:  BCF    08.1
....................    lcd_rw_tris(); 
00FB:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00FC:  BCF    03.5
00FD:  BCF    08.1
00FE:  BSF    03.5
00FF:  BCF    08.1
....................    lcd_output_rw(0); 
0100:  BCF    03.5
0101:  BCF    08.2
0102:  BSF    03.5
0103:  BCF    08.2
....................    lcd_output_enable(0); 
0104:  BCF    03.5
0105:  BCF    08.0
0106:  BSF    03.5
0107:  BCF    08.0
....................      
....................    delay_ms(15); 
0108:  MOVLW  0F
0109:  BCF    03.5
010A:  MOVWF  29
010B:  CALL   02C
....................    for(i=1;i<=3;++i) 
010C:  MOVLW  01
010D:  MOVWF  22
010E:  MOVF   22,W
010F:  SUBLW  03
0110:  BTFSS  03.0
0111:  GOTO   11A
....................    { 
....................        lcd_send_nibble(3); 
0112:  MOVLW  03
0113:  MOVWF  30
0114:  CALL   041
....................        delay_ms(5); 
0115:  MOVLW  05
0116:  MOVWF  29
0117:  CALL   02C
....................    } 
0118:  INCF   22,F
0119:  GOTO   10E
....................      
....................    lcd_send_nibble(2); 
011A:  MOVLW  02
011B:  MOVWF  30
011C:  CALL   041
....................    for(i=0;i<=3;++i) 
011D:  CLRF   22
011E:  MOVF   22,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12B
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0122:  MOVF   22,W
0123:  CALL   004
0124:  MOVWF  23
0125:  CLRF   2D
0126:  MOVF   23,W
0127:  MOVWF  2E
0128:  CALL   09D
0129:  INCF   22,F
012A:  GOTO   11E
.................... } 
012B:  RETURN
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
012C:  DECFSZ 2A,W
012D:  GOTO   12F
012E:  GOTO   132
....................       address=LCD_LINE_TWO; 
012F:  MOVLW  40
0130:  MOVWF  2B
....................    else 
0131:  GOTO   133
....................       address=0; 
0132:  CLRF   2B
....................       
....................    address+=x-1; 
0133:  MOVLW  01
0134:  SUBWF  29,W
0135:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
0136:  MOVF   2B,W
0137:  IORLW  80
0138:  MOVWF  2C
0139:  CLRF   2D
013A:  MOVF   2C,W
013B:  MOVWF  2E
013C:  CALL   09D
.................... } 
013D:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
013E:  MOVF   28,W
013F:  XORLW  0C
0140:  BTFSC  03.2
0141:  GOTO   149
0142:  XORLW  06
0143:  BTFSC  03.2
0144:  GOTO   151
0145:  XORLW  02
0146:  BTFSC  03.2
0147:  GOTO   157
0148:  GOTO   15C
....................       case '\f'   :  lcd_send_byte(0,1); 
0149:  CLRF   2D
014A:  MOVLW  01
014B:  MOVWF  2E
014C:  CALL   09D
....................                      delay_ms(2); 
014D:  MOVLW  02
014E:  MOVWF  29
014F:  CALL   02C
....................                      break; 
0150:  GOTO   162
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0151:  MOVLW  01
0152:  MOVWF  29
0153:  MOVLW  02
0154:  MOVWF  2A
0155:  CALL   12C
0156:  GOTO   162
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0157:  CLRF   2D
0158:  MOVLW  10
0159:  MOVWF  2E
015A:  CALL   09D
015B:  GOTO   162
....................       
....................       default     : lcd_send_byte(1,c);     break; 
015C:  MOVLW  01
015D:  MOVWF  2D
015E:  MOVF   28,W
015F:  MOVWF  2E
0160:  CALL   09D
0161:  GOTO   162
....................    } 
.................... } 
0162:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... int temperatura; 
.................... void main() 
.................... { 
*
0225:  MOVF   03,W
0226:  ANDLW  1F
0227:  MOVWF  03
0228:  MOVLW  57
0229:  MOVWF  77
022A:  MOVLW  20
022B:  MOVWF  04
022C:  BCF    03.7
022D:  CLRF   00
022E:  INCF   04,F
022F:  DECFSZ 77,F
0230:  GOTO   22D
0231:  CLRF   78
0232:  CLRF   79
0233:  CLRF   7A
0234:  CLRF   7B
0235:  CLRF   7C
0236:  CLRF   7D
0237:  CLRF   7E
0238:  MOVLW  50
0239:  MOVWF  77
023A:  MOVLW  A0
023B:  MOVWF  04
023C:  BCF    03.7
023D:  CLRF   00
023E:  INCF   04,F
023F:  DECFSZ 77,F
0240:  GOTO   23D
0241:  MOVLW  60
0242:  MOVWF  77
0243:  MOVLW  10
0244:  MOVWF  04
0245:  BSF    03.7
0246:  CLRF   00
0247:  INCF   04,F
0248:  DECFSZ 77,F
0249:  GOTO   246
024A:  BCF    03.7
024B:  MOVLW  60
024C:  MOVWF  77
024D:  MOVLW  90
024E:  MOVWF  04
024F:  BSF    03.7
0250:  CLRF   00
0251:  INCF   04,F
0252:  DECFSZ 77,F
0253:  GOTO   250
0254:  BCF    03.7
0255:  CLRF   20
0256:  CLRF   04
0257:  BCF    03.7
0258:  MOVLW  1F
0259:  ANDWF  03,F
025A:  BSF    03.5
025B:  BSF    1F.0
025C:  BSF    1F.1
025D:  BSF    1F.2
025E:  BCF    1F.3
025F:  MOVLW  07
0260:  MOVWF  1C
....................    setup_adc_ports(AN0); 
*
0264:  BSF    03.5
0265:  BCF    1F.0
0266:  BSF    1F.1
0267:  BSF    1F.2
0268:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0269:  BCF    1F.6
026A:  BCF    03.5
026B:  BCF    1F.6
026C:  BCF    1F.7
026D:  BSF    03.5
026E:  BCF    1F.7
026F:  BCF    03.5
0270:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0271:  BSF    03.5
0272:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0273:  BCF    03.5
0274:  BCF    14.5
0275:  BCF    21.5
0276:  MOVF   21,W
0277:  BSF    03.5
0278:  MOVWF  07
0279:  BCF    03.5
027A:  BSF    21.4
027B:  MOVF   21,W
027C:  BSF    03.5
027D:  MOVWF  07
027E:  BCF    03.5
027F:  BCF    21.3
0280:  MOVF   21,W
0281:  BSF    03.5
0282:  MOVWF  07
0283:  MOVLW  01
0284:  BCF    03.5
0285:  MOVWF  14
0286:  MOVLW  00
0287:  BSF    03.5
0288:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
0289:  MOVF   01,W
028A:  ANDLW  C7
028B:  IORLW  08
028C:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
028D:  BCF    03.5
028E:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
028F:  MOVLW  00
0290:  MOVWF  78
0291:  MOVWF  12
0292:  MOVLW  00
0293:  BSF    03.5
0294:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
0295:  MOVLW  07
0296:  MOVWF  1C
0297:  MOVF   05,W
0298:  MOVWF  05
0299:  MOVLW  03
029A:  MOVWF  77
029B:  DECFSZ 77,F
029C:  GOTO   29B
029D:  MOVF   1C,W
029E:  BCF    03.5
029F:  BCF    0D.6
....................    setup_vref(FALSE); 
02A0:  BSF    03.5
02A1:  CLRF   1D
....................  
....................    // TODO: USER CODE!!  
....................    lcd_init();  
02A2:  BCF    03.5
02A3:  CALL   0F4
....................    lcd_gotoxy(5,1);   
02A4:  MOVLW  05
02A5:  MOVWF  29
02A6:  MOVLW  01
02A7:  MOVWF  2A
02A8:  CALL   12C
....................    printf(lcd_putc,"Temperatura"); //este aparece arriba 
02A9:  MOVLW  0C
02AA:  BSF    03.6
02AB:  MOVWF  0D
02AC:  MOVLW  00
02AD:  MOVWF  0F
02AE:  BCF    03.6
02AF:  CALL   163
....................    delay_ms(350);  
02B0:  MOVLW  02
02B1:  MOVWF  22
02B2:  MOVLW  AF
02B3:  MOVWF  29
02B4:  CALL   02C
02B5:  DECFSZ 22,F
02B6:  GOTO   2B2
....................    lcd_init();  
02B7:  CALL   0F4
....................  while(true)  
....................     {  
....................     temperatura= read_adc()/2; //grados centigrados 
02B8:  BSF    1F.2
02B9:  BTFSC  1F.2
02BA:  GOTO   2B9
02BB:  BCF    03.0
02BC:  RRF    1E,W
02BD:  MOVWF  20
....................     lcd_gotoxy(5,1);  
02BE:  MOVLW  05
02BF:  MOVWF  29
02C0:  MOVLW  01
02C1:  MOVWF  2A
02C2:  CALL   12C
....................     printf(lcd_putc,"%i",temperatura);  
02C3:  MOVF   20,W
02C4:  MOVWF  22
02C5:  MOVLW  1F
02C6:  MOVWF  23
02C7:  GOTO   1BE
....................     lcd_gotoxy(14,1);  
02C8:  MOVLW  0E
02C9:  MOVWF  29
02CA:  MOVLW  01
02CB:  MOVWF  2A
02CC:  CALL   12C
....................     printf(lcd_putc,"*C");  
02CD:  MOVLW  2A
02CE:  MOVWF  28
02CF:  CALL   13E
02D0:  MOVLW  43
02D1:  MOVWF  28
02D2:  CALL   13E
....................     delay_ms(200);  
02D3:  MOVLW  C8
02D4:  MOVWF  29
02D5:  CALL   02C
....................      
....................     if(temperatura >=28)  
02D6:  MOVF   20,W
02D7:  SUBLW  1B
02D8:  BTFSC  03.0
02D9:  GOTO   2ED
....................      {  
....................       output_high(PIN_A1);  
02DA:  BSF    03.5
02DB:  BCF    05.1
02DC:  BCF    03.5
02DD:  BSF    05.1
....................       lcd_gotoxy(4,2); 
02DE:  MOVLW  04
02DF:  MOVWF  29
02E0:  MOVLW  02
02E1:  MOVWF  2A
02E2:  CALL   12C
....................       printf(lcd_putc,"Ventilador on");  
02E3:  MOVLW  12
02E4:  BSF    03.6
02E5:  MOVWF  0D
02E6:  MOVLW  00
02E7:  MOVWF  0F
02E8:  BCF    03.6
02E9:  CALL   163
....................       delay_ms(200); 
02EA:  MOVLW  C8
02EB:  MOVWF  29
02EC:  CALL   02C
....................      }  
....................       if((temperatura <=27) && (temperatura >= 11))  
02ED:  MOVF   20,W
02EE:  SUBLW  1B
02EF:  BTFSS  03.0
02F0:  GOTO   308
02F1:  MOVF   20,W
02F2:  SUBLW  0A
02F3:  BTFSC  03.0
02F4:  GOTO   308
....................        {  
....................          output_low(PIN_A1);  
02F5:  BSF    03.5
02F6:  BCF    05.1
02F7:  BCF    03.5
02F8:  BCF    05.1
....................          lcd_gotoxy(5,2); 
02F9:  MOVLW  05
02FA:  MOVWF  29
02FB:  MOVLW  02
02FC:  MOVWF  2A
02FD:  CALL   12C
....................          printf(lcd_putc,"Buen clima"); //este va abajo 
02FE:  MOVLW  19
02FF:  BSF    03.6
0300:  MOVWF  0D
0301:  MOVLW  00
0302:  MOVWF  0F
0303:  BCF    03.6
0304:  CALL   163
....................          delay_ms(200);  
0305:  MOVLW  C8
0306:  MOVWF  29
0307:  CALL   02C
....................        }  
....................        if((temperatura <=10) && (temperatura >= 1))  
0308:  MOVF   20,W
0309:  SUBLW  0A
030A:  BTFSS  03.0
030B:  GOTO   323
030C:  MOVF   20,W
030D:  SUBLW  00
030E:  BTFSC  03.0
030F:  GOTO   323
....................         {  
....................          output_low(PIN_A1);  
0310:  BSF    03.5
0311:  BCF    05.1
0312:  BCF    03.5
0313:  BCF    05.1
....................          lcd_gotoxy(5,2); 
0314:  MOVLW  05
0315:  MOVWF  29
0316:  MOVLW  02
0317:  MOVWF  2A
0318:  CALL   12C
....................          printf(lcd_putc,"Hace frio :S"); //este va abajo 
0319:  MOVLW  1F
031A:  BSF    03.6
031B:  MOVWF  0D
031C:  MOVLW  00
031D:  MOVWF  0F
031E:  BCF    03.6
031F:  CALL   163
....................          delay_ms(200);  
0320:  MOVLW  C8
0321:  MOVWF  29
0322:  CALL   02C
....................        }  
....................         if(temperatura <= 0)  
0323:  MOVF   20,F
0324:  BTFSS  03.2
0325:  GOTO   339
....................         {  
....................          output_low(PIN_A1);  
0326:  BSF    03.5
0327:  BCF    05.1
0328:  BCF    03.5
0329:  BCF    05.1
....................          lcd_gotoxy(1,2); 
032A:  MOVLW  01
032B:  MOVWF  29
032C:  MOVLW  02
032D:  MOVWF  2A
032E:  CALL   12C
....................          printf(lcd_putc,"VEEERRRGGAA"); //este va abajo 
032F:  MOVLW  26
0330:  BSF    03.6
0331:  MOVWF  0D
0332:  MOVLW  00
0333:  MOVWF  0F
0334:  BCF    03.6
0335:  CALL   163
....................          delay_ms(200);  
0336:  MOVLW  C8
0337:  MOVWF  29
0338:  CALL   02C
....................        }  
....................    } 
0339:  GOTO   2B8
.................... } 
033A:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
